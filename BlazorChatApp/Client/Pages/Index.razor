@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRunTime
@implements IAsyncDisposable

<PageTitle>SignalR Chat</PageTitle>
<h3>SignalR Chat</h3>

@if(!IsConnected)
{
    <div class="input-group">
        <input @bind=username class="form-control" placeholder="Enter Name">
            <button class="btn btn-primary form-control-append" @onclick="Connect">Connect</button>
    </div>
}
else
{
    <textarea style="width:100%; height:300px;" readonly @ref="TextAreaRef">
        @messages
    </textarea>
    <div class="input-group">
        <input @bind-value="message" @bind-value:event="oninput" @onkeyup="HandleInput" class="form-control">
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
}

@code{
    private HubConnection? hubConnection;
    //stores all messages
    private string messages = string.Empty;
    //username
    private string username = string.Empty;
    //current-msg
    private string message = string.Empty;

    ElementReference TextAreaRef;

    private bool IsConnected = false;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}")).Build();

        hubConnection.On<string, string>("GetMessage", (username, message)=>
        {
            var msg = $"{(string.IsNullOrEmpty(username) ? "" : username + ":")} {message}";
            messages += msg + '\n';
            JSRunTime.InvokeVoidAsync("scrollToBotton", TextAreaRef);
            StateHasChanged(); 
        }); 

        await hubConnection.StartAsync();

        IsConnected = hubConnection.State == HubConnectionState.Connected;
    }

    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("SendMessage", username, message);
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if ( hubConnection != null )
        {
            await hubConnection.DisposeAsync(); 
        }
    }

  
}